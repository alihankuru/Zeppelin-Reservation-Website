
@model ZeppelinWebsite.ViewModel.UserViewModel
@{
    ViewBag.Title = "Register";
}

<html>
<head>

    <style type="text/css">
        fieldset {
            font-family: sans-serif;
            border: 3px solid #a0a0a0;
            background: #ccc;
            border-radius: 5px;
            padding: 15px;
            margin-top: 100px;
            margin-left: 250px;
            margin-right: 250px;
        }

            fieldset legend {
                background: #808080;
                color: #fff;
                padding: 5px 10px 10px 20px;
                font-size: 15px;
                border-radius: 5px;
                box-shadow: 0 0 0 5px #ddd;
                margin-left: 1px;
                margin-right: 10px;
            }
    </style>

</head>

<body style="background-color:#cce6f9;">

    <h2>Register</h2>


    @using (Html.BeginForm("Register", "Account", FormMethod.Post, htmlAttributes: new { }))
    {
        <fieldset>
            <legend>User Registration</legend>
            <div class="container">
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.UserName, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(expression: model => model.UserName, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.UserName, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.UserName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(expression: model => model.FirstName, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.FirstName, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.FirstName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.LastName, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(expression: model => model.LastName, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.LastName, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.LastName, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>



                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.UserEmail, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(expression: model => model.UserEmail, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.UserEmail, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.UserEmail, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.UserPassword, htmlAttributes: new { @class = "control-label" })
                        @Html.PasswordFor(expression: model => model.UserPassword, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.UserPassword, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.UserPassword, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(expression: model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label" })
                        @Html.PasswordFor(expression: model => model.ConfirmPassword, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(expression: model => model.ConfirmPassword, null, new { @class = "text-danger" })*@
                        @Html.ValidationMessageFor(expression: model => model.ConfirmPassword, validationMessage: null, htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>



                <div class="row">
                    <div class="form-group">
                        <input type="submit" name="Register" value="Register" class="btn btn-primary active" />
                    </div>

                </div>

        </fieldset>


    }





</body>

</html>





